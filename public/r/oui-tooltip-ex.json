{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-tooltip-ex",
  "type": "registry:component",
  "registryDependencies": [
    "https://oui.mw10013.workers.dev/r/oui-button.json",
    "https://oui.mw10013.workers.dev/r/oui-tooltip.json",
    "https://oui.mw10013.workers.dev/r/oui-label.json",
    "https://oui.mw10013.workers.dev/r/oui-link.json",
    "https://oui.mw10013.workers.dev/r/oui-text.json"
  ],
  "files": [
    {
      "path": "registry/components/oui-tooltip-ex.tsx",
      "content": "import type { ReactElement } from \"react\";\nimport { Button } from \"@/registry/components/ui/oui-button\";\nimport { Label } from \"@/registry/components/ui/oui-label\";\nimport { Link } from \"@/registry/components/ui/oui-link\";\nimport { Text } from \"@/registry/components/ui/oui-text\";\nimport { OverlayArrow, Tooltip } from \"@/registry/components/ui/oui-tooltip\";\nimport * as Rac from \"react-aria-components\";\n\nexport interface TooltipExProps\n  extends React.ComponentProps<typeof Rac.Tooltip>,\n    Partial<\n      Pick<\n        React.ComponentProps<typeof Rac.TooltipTrigger>,\n        \"isOpen\" | \"defaultOpen\" | \"onOpenChange\" | \"delay\"\n      >\n    > {\n  triggerElement?: string | ReactElement;\n}\n\n/**\n * A tooltip that can be opened via a trigger element or programmatically.\n *\n * `triggerElement` is required for the tooltip to be positioned and displayed.\n * The open state can be uncontrolled (using `defaultOpen`) or controlled\n * (using `isOpen` and `onOpenChange`).\n */\nexport function TooltipEx({\n  triggerElement,\n  isOpen,\n  defaultOpen,\n  onOpenChange,\n  delay,\n  children,\n  ...props\n}: TooltipExProps) {\n  if (!triggerElement) {\n    return null;\n  }\n  return (\n    <Rac.TooltipTrigger\n      isOpen={isOpen}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}\n      delay={delay}\n    >\n      {typeof triggerElement === \"string\" ? (\n        <Button variant=\"ghost\">{triggerElement}</Button>\n      ) : (\n        triggerElement\n      )}\n      <Tooltip {...props}>\n        {(renderProps) => (\n          <>\n            <OverlayArrow />\n            {typeof children === \"function\" ? children(renderProps) : children}\n          </>\n        )}\n      </Tooltip>\n    </Rac.TooltipTrigger>\n  );\n}\n\nexport default function Component() {\n  return (\n    <div className=\"grid gap-2\">\n      <Label>TooltipEx</Label>\n      <Text slot=\"description\">\n        A reusable wrapper for{\" \"}\n        <Link\n          href=\"https://react-spectrum.adobe.com/react-aria/Tooltip.html\"\n          underline=\"always\"\n        >\n          Tooltip\n        </Link>{\" \"}\n        â€” see{\" \"}\n        <Link\n          href=\"https://oui.mw10013.workers.dev/filter?tags=tooltip-ex\"\n          underline=\"always\"\n        >\n          Uses\n        </Link>\n        .\n      </Text>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "tooltip",
      "tooltip-ex",
      "button"
    ]
  }
}