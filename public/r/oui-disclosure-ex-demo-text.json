{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-disclosure-ex-demo-text",
  "type": "registry:component",
  "registryDependencies": [
    "@oui/oui-disclosure-ex"
  ],
  "files": [
    {
      "path": "registry/default/components/oui-disclosure-ex-demo-text.tsx",
      "content": "\"use client\";\n\nimport { DisclosureEx } from \"@/registry/default/components/oui-disclosure-ex\";\nimport * as Rac from \"react-aria-components\";\n\nexport default function Component() {\n  return (\n    <Rac.DisclosureGroup className=\"w-full\">\n      <DisclosureEx\n        id=\"item-1-enterprise\"\n        title=\"What are the key considerations when implementing a comprehensive enterprise-level authentication system?\"\n      >\n        Implementing a robust enterprise authentication system requires careful\n        consideration of multiple factors. This includes secure password hashing\n        and storage, multi-factor authentication (MFA) implementation, session\n        management, OAuth2 and SSO integration, regular security audits, rate\n        limiting to prevent brute force attacks, and maintaining detailed audit\n        logs. Additionally, you&apos;ll need to consider scalability,\n        performance impact, and compliance with relevant data protection\n        regulations such as GDPR or HIPAA.\n      </DisclosureEx>\n      <DisclosureEx\n        id=\"item-2-distributed\"\n        title=\"How does modern distributed system architecture handle eventual consistency and data synchronization across multiple regions?\"\n      >\n        Modern distributed systems employ various strategies to maintain data\n        consistency across regions. This often involves using techniques like\n        CRDT (Conflict-Free Replicated Data Types), vector clocks, and gossip\n        protocols. Systems might implement event sourcing patterns, utilize\n        message queues for asynchronous updates, and employ sophisticated\n        conflict resolution strategies. Popular solutions like Amazon&apos;s\n        DynamoDB and Google&apos;s Spanner demonstrate different approaches to\n        solving these challenges, balancing between consistency, availability,\n        and partition tolerance as described in the CAP theorem.\n      </DisclosureEx>\n    </Rac.DisclosureGroup>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "disclosure",
      "disclosure-ex"
    ],
    "canPreview": true,
    "width": "wide",
    "canOpenInV0": true
  }
}