{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base",
  "type": "registry:ui",
  "title": "Base",
  "description": "Base styles and utilities for Oui.",
  "dependencies": [
    "react-aria-components",
    "tailwind-merge"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/ui/oui-base.ts",
      "content": "\"use client\";\n\n/**\n * The `oui-base` module provides foundational Tailwind CSS styles and utilities.\n */\n\nimport { composeRenderProps } from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * A tagged template literal function that acts like an identity function for Tailwind CSS class strings.\n * Its primary purpose is to enable `prettier-plugin-tailwindcss` to sort classes in standalone\n * string literals or template literals not otherwise covered by the plugin (e.g., outside JSX `className`).\n * @see {@link https://github.com/tailwindlabs/prettier-plugin-tailwindcss?tab=readme-ov-file#sorting-classes-in-template-literals}\n */\nexport const tw = (strings: TemplateStringsArray, ...values: string[]) =>\n  String.raw({ raw: strings.raw }, ...values);\n\n/**\n * Base focus visible styles.\n *\n * Shadcn UI generally uses a custom ring (`ring-ring/50 ring-[3px]`) with `outline-none` for `focus-visible`.\n *\n * Deviations occur for specific components:\n * - Sliders/Resizables: Adjusted ring thickness/offset for small interactive parts.\n * - Menubar items: Use background changes for focus.\n * - Tabs content: May omit explicit focus rings.\n * - Input OTP: Uses `data-[active=true]` for slot highlighting.\n *\n * This approach balances a consistent baseline with flexibility for component-specific needs.\n *\n * 'outline-none' resets user agent styles especially on Chrome\n */\nexport const focusVisibleStyles = tw`outline-none data-focus-visible:border-ring data-focus-visible:ring-[3px] data-focus-visible:ring-ring/50`;\n\n/**\n * Base group focus visible styles.\n *\n * Intended for child elements within a RAC component that structures with a label (eg. checkbox, radio).\n */\nexport const groupFocusVisibleStyles = tw`outline-none group-data-focus-visible:border-ring group-data-focus-visible:ring-[3px] group-data-focus-visible:ring-ring/50`;\n\n/**\n * Base disabled styles.\n *\n * `cursor-not-allowed` is omitted as it is mainly for form controls in shadcn; visual/interaction cues are sufficient.\n *\n * Note that it includes `pointer-events-none` which prevents any cursor style (including `cursor-not-allowed`).\n * This may not be suitable for RAC components that structure with a <label> (eg. radio, checkbox and switch)\n * and `labelComponentStyles` from `oui-label` is preferred.\n */\nexport const disabledStyles = tw`data-disabled:pointer-events-none data-disabled:opacity-50`;\n\n/**\n * Composes Tailwind CSS classes with render props.\n * @param className - Static or function-based CSS classes.\n * @param tw - Tailwind classes to merge.\n * @returns Composed class string or function.\n * @example\n * ```tsx\n * const newClassName = composeTailwindRenderProps(className, [\n *   baseStyles,\n *   \"data-[focused]:bg-accent data-[hovered]:bg-accent\",\n * ]);\n * ```\n */\nexport function composeTailwindRenderProps<T>(\n  className: string | ((v: T) => string) | undefined,\n  tw: Parameters<typeof twMerge>[0],\n): string | ((v: T) => string) {\n  return composeRenderProps(className, (className) => twMerge(tw, className));\n}\n",
      "type": "registry:ui"
    }
  ]
}