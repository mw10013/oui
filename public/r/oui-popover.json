{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-popover",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components",
    "class-variance-authority",
    "tailwind-merge"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/ui/oui-popover.tsx",
      "content": "\"use client\";\n\nimport { cva } from \"class-variance-authority\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * Styles for the Popover component, derived from shadcn UI's `DropdownMenuContent` and `SelectContent`.\n * React Aria Components' Popover handles the actual placement and applies essential inline styles (e.g., z-index, positioning).\n * These `popoverStyles` primarily define appearance, animations, and context-specific sizing via the `trigger` variant.\n * The `trigger` variant styles are applied based on the `trigger` render prop from React Aria Components,\n * allowing contextual styling for different trigger types like `MenuTrigger`, `Select`, or `ComboBox`.\n */\n\nconst trigger = {\n  DialogTrigger: \"min-w-72 p-4\",\n  MenuTrigger: \"\",\n  SubmenuTrigger: \"shadow-lg\",\n  Select: \"min-w-(--trigger-width) p-1\",\n  ComboBox: \"min-w-(--trigger-width) p-1\",\n} as const;\n\nconst placement = {\n  top: \"data-[placement=top]:slide-in-from-bottom-2\",\n  bottom: \"data-[placement=bottom]:slide-in-from-top-2\",\n  left: \"data-[placement=left]:slide-in-from-right-2\",\n  right: \"data-[placement=right]:slide-in-from-left-2\",\n} as const;\n\nexport const popoverVariants = cva(\n  [\n    \"relative min-w-32 overflow-x-hidden overflow-y-auto rounded-md border bg-popover text-popover-foreground shadow-md outline-none\",\n    \"data-entering:animate-in data-entering:fade-in-0 data-entering:zoom-in-95\",\n    \"data-exiting:animate-out data-exiting:fade-out-0 data-exiting:zoom-out-95\",\n  ],\n  {\n    variants: { trigger, placement },\n  },\n);\n\nfunction isPopoverVariantsTriggerKey(\n  value: unknown,\n): value is keyof typeof trigger {\n  return typeof value === \"string\" && Object.keys(trigger).includes(value);\n}\n\nfunction isPopoverVariantsPlacementKey(\n  value: unknown,\n): value is keyof typeof placement {\n  return typeof value === \"string\" && Object.keys(placement).includes(value);\n}\n\nexport function Popover({ className, offset = 4, ...props }: Rac.PopoverProps) {\n  return (\n    <Rac.Popover\n      offset={offset}\n      className={Rac.composeRenderProps(\n        className,\n        (className, { trigger, placement, ...renderProps }) =>\n          twMerge(\n            popoverVariants({\n              ...renderProps,\n              trigger: isPopoverVariantsTriggerKey(trigger)\n                ? trigger\n                : undefined,\n              placement: isPopoverVariantsPlacementKey(placement)\n                ? placement\n                : undefined,\n              className,\n            }),\n          ),\n      )}\n      {...props}\n    />\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}