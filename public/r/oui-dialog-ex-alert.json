{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-dialog-ex-alert",
  "type": "registry:component",
  "registryDependencies": [
    "https://oui.mw10013.workers.dev/r/oui-button.json",
    "https://oui.mw10013.workers.dev/r/oui-dialog.json",
    "https://oui.mw10013.workers.dev/r/oui-heading.json",
    "https://oui.mw10013.workers.dev/r/oui-modal-ex.json"
  ],
  "files": [
    {
      "path": "registry/components/oui-dialog-ex-alert.tsx",
      "content": "import type { ReactNode } from \"react\";\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useRef,\n  useState,\n} from \"react\";\nimport { ModalEx } from \"@/registry/components/oui-modal-ex\";\nimport { Button } from \"@/registry/components/ui/oui-button\";\nimport {\n  Dialog,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n} from \"@/registry/components/ui/oui-dialog\";\nimport { Heading } from \"@/registry/components/ui/oui-heading\";\nimport { Label } from \"@/registry/components/ui/oui-label\";\nimport { Link } from \"@/registry/components/ui/oui-link\";\nimport { Text } from \"@/registry/components/ui/oui-text\";\nimport * as Rac from \"react-aria-components\";\n\nexport interface DialogExAlertProps\n  extends Rac.DialogProps,\n    Pick<Rac.ModalOverlayProps, \"isOpen\" | \"onOpenChange\" | \"defaultOpen\"> {\n  type?: \"confirm\" | \"acknowledge\";\n  title: React.ReactNode;\n  children: React.ReactNode;\n  confirmLabel?: string;\n  cancelLabel?: string;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n  modalClassName?: string;\n}\n\n/**\n * A modal confirmation or acknowledgement dialog with a title, message, and\n * customizable action buttons. It is not dismissable by an outside press.\n *\n * - `type=\"confirm\"` (default): Renders \"Confirm\" and \"Cancel\" buttons.\n * - `type=\"acknowledge\"`: Renders a single \"Acknowledge\" button.\n */\nexport function DialogExAlert({\n  type = \"confirm\",\n  title,\n  children,\n  confirmLabel = type === \"confirm\" ? \"Continue\" : \"OK\",\n  cancelLabel = \"Cancel\",\n  onConfirm,\n  onCancel,\n  modalClassName,\n  isOpen,\n  onOpenChange,\n  defaultOpen,\n  ...props\n}: DialogExAlertProps) {\n  return (\n    <ModalEx\n      className={modalClassName}\n      isDismissable={false}\n      isOpen={isOpen}\n      onOpenChange={onOpenChange}\n      defaultOpen={defaultOpen}\n    >\n      <Dialog role=\"alertdialog\" {...props}>\n        <DialogHeader>\n          <Heading variant=\"alert\" slot=\"title\">\n            {title}\n          </Heading>\n          <DialogDescription>{children}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          {type === \"confirm\" && (\n            <Button variant=\"outline\" slot=\"close\" autoFocus onPress={onCancel}>\n              {cancelLabel}\n            </Button>\n          )}\n          <Button\n            slot=\"close\"\n            onPress={onConfirm}\n            autoFocus={type === \"acknowledge\"}\n          >\n            {confirmLabel}\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </ModalEx>\n  );\n}\n\ntype DialogExAlertOptions = Omit<\n  DialogExAlertProps,\n  \"isOpen\" | \"onOpenChange\" | \"defaultOpen\" | \"onConfirm\" | \"onCancel\"\n>;\n\ninterface DialogExAlertContextType {\n  show: (options: DialogExAlertOptions) => Promise<boolean>;\n}\n\nconst DialogExAlertContext = createContext<\n  DialogExAlertContextType | undefined\n>(undefined);\n\nexport function useDialogExAlert() {\n  const context = useContext(DialogExAlertContext);\n  if (!context) {\n    throw new Error(\n      \"useDialogExAlert must be used within a DialogExAlertProvider\",\n    );\n  }\n  return context;\n}\n\n/**\n * This provider manages a global alert dialog.\n */\nexport function DialogExAlertProvider({ children }: { children: ReactNode }) {\n  /* We use a promise-based approach to allow for async/await usage.\n   * `useRef` stores the promise's `resolve` function across renders without\n   * causing re-renders. When the user confirms or cancels, this `resolve`\n   * function is called to fulfill the promise.\n   *\n   * `useCallback` memoizes the `show` function to prevent consumers of the\n   * context from re-rendering unnecessarily, which is a performance\n   * optimization.\n   */\n  const [options, setOptions] = useState<DialogExAlertOptions | null>(null);\n  const promiseRef = useRef<{ resolve: (value: boolean) => void } | null>(null);\n\n  const show = useCallback((newOptions: DialogExAlertOptions) => {\n    setOptions(newOptions);\n    return new Promise<boolean>((resolve) => {\n      promiseRef.current = { resolve };\n    });\n  }, []);\n\n  const handleClose = (confirmed: boolean) => {\n    if (promiseRef.current) {\n      promiseRef.current.resolve(confirmed);\n    }\n    setOptions(null);\n    promiseRef.current = null;\n  };\n\n  return (\n    <DialogExAlertContext.Provider value={{ show }}>\n      {children}\n      {options && (\n        <DialogExAlert\n          {...options}\n          isOpen\n          onConfirm={() => {\n            handleClose(true);\n          }}\n          onCancel={() => {\n            handleClose(false);\n          }}\n        />\n      )}\n    </DialogExAlertContext.Provider>\n  );\n}\n\nexport default function Component() {\n  return (\n    <div className=\"grid gap-2\">\n      <Label>DialogExAlert</Label>\n      <Text slot=\"description\">\n        A reusable wrapper for an alert{\" \"}\n        <Link\n          href=\"https://react-spectrum.adobe.com/react-aria/Dialog.html\"\n          underline=\"always\"\n        >\n          Dialog\n        </Link>{\" \"}\n        â€” see{\" \"}\n        <Link\n          href=\"https://oui.mw10013.workers.dev/filter?tags=dialog-ex-alert\"\n          underline=\"always\"\n        >\n          Uses\n        </Link>\n        .\n      </Text>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "dialog",
      "dialog-ex-alert",
      "button",
      "heading",
      "modal-ex"
    ]
  }
}