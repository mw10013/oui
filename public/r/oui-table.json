{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-table",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components",
    "lucide-react",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "https://oui-production.mw10013.workers.dev/r/oui-base.json"
  ],
  "files": [
    {
      "path": "registry/components/ui/oui-table.tsx",
      "content": "import * as React from \"react\";\nimport { ArrowDown, ArrowUp } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\nimport { composeTailwindRenderProps } from \"@/registry/components/ui/oui-base\";\n\n// Table is not interactive on first click in SSR : https://github.com/adobe/react-spectrum/issues/8239\n\nexport interface TableProps extends Rac.TableProps {\n  containerClassName?: string;\n}\n\nexport function Table({\n  className,\n  containerClassName,\n  children,\n  ...props\n}: TableProps) {\n  return (\n    <div\n      className={twMerge(\"relative w-full overflow-x-auto\", containerClassName)}\n    >\n      <Rac.Table\n        className={composeTailwindRenderProps(\n          className,\n          \"w-full caption-bottom text-sm\",\n        )}\n        {...props}\n      >\n        {children}\n      </Rac.Table>\n    </div>\n  );\n}\n\nexport function TableHeader<T extends object>({\n  className,\n  ...props\n}: Rac.TableHeaderProps<T>) {\n  return (\n    <Rac.TableHeader\n      className={composeTailwindRenderProps(className, \"[&_tr]:border-b\")}\n      {...props}\n    />\n  );\n}\n\nexport function TableBody<T extends object>({\n  className,\n  ...props\n}: Rac.TableBodyProps<T>) {\n  return (\n    <Rac.TableBody\n      className={composeTailwindRenderProps(\n        className,\n        \"[&_tr:last-child]:border-0\",\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function TableFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableSectionElement>) {\n  return (\n    <tfoot\n      className={twMerge(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function Row<T extends object>({\n  className,\n  ...props\n}: Rac.RowProps<T>) {\n  return (\n    <Rac.Row\n      className={composeTailwindRenderProps(\n        className,\n        \"data-[hovered]:bg-muted/50 data-[selected]:bg-muted border-b transition-colors data-[disabled]:opacity-50\",\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function Column({ className, children, ...props }: Rac.ColumnProps) {\n  return (\n    <Rac.Column\n      className={composeTailwindRenderProps(\n        className,\n        \"text-foreground h-10 whitespace-nowrap px-2 text-left align-middle font-medium\",\n      )}\n      {...props}\n    >\n      {(renderProps) => {\n        const { allowsSorting, sortDirection } = renderProps;\n        const content =\n          typeof children === \"function\" ? children(renderProps) : children;\n        return (\n          <div className=\"flex items-center gap-2\">\n            {content}\n            {allowsSorting &&\n              sortDirection &&\n              (sortDirection === \"ascending\" ? (\n                <ArrowUp className=\"size-4\" />\n              ) : (\n                <ArrowDown className=\"size-4\" />\n              ))}\n          </div>\n        );\n      }}\n    </Rac.Column>\n  );\n}\n\nexport function Cell({ className, ...props }: Rac.CellProps) {\n  return (\n    <Rac.Cell\n      className={composeTailwindRenderProps(\n        className,\n        \"whitespace-nowrap p-2 align-middle\",\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function TableCaption({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLTableCaptionElement>) {\n  return (\n    <caption\n      className={twMerge(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}