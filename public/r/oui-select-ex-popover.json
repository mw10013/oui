{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-select-ex-popover",
  "type": "registry:component",
  "registryDependencies": [
    "https://oui.mw10013.workers.dev/r/oui-field-error.json",
    "https://oui.mw10013.workers.dev/r/oui-label.json",
    "https://oui.mw10013.workers.dev/r/oui-popover.json",
    "https://oui.mw10013.workers.dev/r/oui-select.json",
    "https://oui.mw10013.workers.dev/r/oui-text.json"
  ],
  "files": [
    {
      "path": "registry/default/components/oui-select-ex-popover.tsx",
      "content": "\"use client\";\n\nimport { FieldError } from \"@/registry/default/ui/oui-field-error\";\nimport { Label } from \"@/registry/default/ui/oui-label\";\nimport { Link } from \"@/registry/default/ui/oui-link\";\nimport { Popover } from \"@/registry/default/ui/oui-popover\";\nimport {\n  Select,\n  SelectButton,\n  SelectValue,\n} from \"@/registry/default/ui/oui-select\";\nimport { Text } from \"@/registry/default/ui/oui-text\";\nimport * as Rac from \"react-aria-components\";\n\nexport interface SelectExPopoverProps<T extends object>\n  extends Omit<Rac.SelectProps<T>, \"children\"> {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  errorMessage?: string | ((validation: Rac.ValidationResult) => string);\n  children: React.ReactNode;\n  buttonClassName?: string;\n  /**\n   * A render function to customize the display of the selected value or placeholder.\n   * Receives `isPlaceholder` and `defaultChildren` (the placeholder string or default rendered item).\n   */\n  renderSelectValue?: (\n    props: Rac.SelectValueRenderProps<T> & {\n      defaultChildren: React.ReactNode | undefined;\n    },\n  ) => React.ReactNode;\n}\n\n/**\n * A select component that renders children in a popover for complex dropdown content like autocomplete.\n * Children are rendered as the contents of Popover and not in a ListBox.\n * Useful for Autocomplete.\n *\n * @example\n *\n * ```tsx\n * <SelectExPopover label=\"Users\" defaultSelectedKey={users[0].id}>\n *   <AutocompleteEx\n *     placeholder=\"Select user...\"\n *     searchFieldProps={{ \"aria-label\": \"User\", autoFocus: true }}\n *   >\n *     <Rac.ListBox items={users}>\n *       {(item) => (\n *         <ListBoxItem id={item.userId}>\n *           {item.username}\n *         </ListBoxItem>\n *       )}\n *     </Rac.ListBox>\n *   </AutocompleteEx>\n * </SelectExPopover>\n * ```\n */\nexport function SelectExPopover<T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  buttonClassName,\n  renderSelectValue,\n  ...props\n}: SelectExPopoverProps<T>) {\n  return (\n    <Select {...props}>\n      {label && <Label>{label}</Label>}\n      <SelectButton className={buttonClassName}>\n        <SelectValue>{renderSelectValue}</SelectValue>\n      </SelectButton>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>{children}</Popover>\n    </Select>\n  );\n}\n\nexport default function Component() {\n  return (\n    <div className=\"grid gap-2\">\n      <Label>SelectExPopover</Label>\n      <Text slot=\"description\">\n        A reusable wrapper for{\" \"}\n        <Link\n          href=\"https://react-spectrum.adobe.com/react-aria/Select.html\"\n          underline=\"always\"\n        >\n          Select\n        </Link>{\" \"}\n        that renders children in a popover for complex dropdown content like\n        autocomplete â€” see{\" \"}\n        <Link\n          href=\"https://oui.mw10013.workers.dev/filter?tags=select-ex-popover\"\n          underline=\"always\"\n        >\n          Uses\n        </Link>\n        .\n      </Text>\n    </div>\n  );\n\n  return <div className=\"p-4\">SelectExPopover</div>;\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "select",
      "select-ex-popover",
      "field-error",
      "popover",
      "text",
      "label"
    ]
  }
}