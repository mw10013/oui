{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar-ex",
  "type": "registry:component",
  "title": "Sidebar Ex",
  "description": "Reusable wrapper for Sidebar.",
  "registryDependencies": [
    "sidebar",
    "https://oui.mw10013.workers.dev/r/button.json",
    "https://oui.mw10013.workers.dev/r/label.json",
    "https://oui.mw10013.workers.dev/r/link.json",
    "https://oui.mw10013.workers.dev/r/text.json"
  ],
  "files": [
    {
      "path": "registry/default/components/oui-sidebar-ex.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { composeTailwindRenderProps } from \"@/registry/default/ui/oui-base\";\nimport { Button } from \"@/registry/default/ui/oui-button\";\nimport { Label } from \"@/registry/default/ui/oui-label\";\nimport { Link } from \"@/registry/default/ui/oui-link\";\nimport { Text } from \"@/registry/default/ui/oui-text\";\nimport { useSidebar } from \"@/registry/default/ui/sidebar\";\nimport { ChevronRight, PanelLeftIcon } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\"; \n\n/**\n * Experimental sidebar extension for replacing parts of the shadcn sidebar with react aria components.\n */\n\nexport function SidebarExTrigger({\n  \"aria-label\": ariaLabel,\n  \"aria-labelledby\": ariaLabelledBy,\n  className,\n  onPress,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      aria-label={!ariaLabel && !ariaLabelledBy ? \"Toggle sidebar\" : ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={composeTailwindRenderProps(className, \"size-7\")}\n      onPress={(e) => {\n        onPress?.(e);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n    </Button>\n  );\n}\n\nexport interface SidebarExTreeNode {\n  id: string;\n  title?: string;\n  href?: string;\n  \"data-testid\"?: string;\n  children?: SidebarExTreeNode[];\n}\n\nexport interface SidebarExTreeItemContentProps\n  extends Rac.TreeItemContentProps {\n  href?: string;\n}\n\nexport function SidebarExTreeItemContent({\n  children,\n  href,\n  ...props\n}: SidebarExTreeItemContentProps) {\n  return (\n    <Rac.TreeItemContent {...props}>\n      {(renderProps) => {\n        return (\n          <div\n            className={twMerge(\n              \"flex h-8 shrink-0 items-center rounded-md px-2 text-sm text-sidebar-foreground ring-sidebar-ring outline-hidden transition-[margin,opacity] duration-200 ease-linear [&>svg]:size-4 [&>svg]:shrink-0\",\n              \"data-hovered:bg-transparent data-hovered:text-current dark:data-hovered:bg-transparent\",\n              renderProps.hasChildItems && \"font-medium\",\n              renderProps.isHovered &&\n                \"bg-sidebar-accent text-sidebar-accent-foreground\",\n              renderProps.isFocusVisible && \"ring-2\",\n              href ? \"cursor-pointer\" : \"cursor-default\",\n            )}\n          >\n            {typeof children === \"function\" ? children(renderProps) : children}\n            {renderProps.hasChildItems && (\n              <Button\n                slot=\"chevron\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"ml-auto\"\n              >\n                <ChevronRight\n                  className={twMerge(\n                    \"transition-transform\",\n                    renderProps.isExpanded && \"rotate-90\",\n                  )}\n                />\n              </Button>\n            )}\n          </div>\n        );\n      }}\n    </Rac.TreeItemContent>\n  );\n}\n\nexport interface SidebarExTreeItemProps extends Partial<Rac.TreeItemProps> {\n  title: string;\n}\n\nexport function SidebarTreeItemEx({\n  title,\n  className,\n  children,\n  ...props\n}: SidebarExTreeItemProps) {\n  return (\n    <Rac.TreeItem\n      textValue={title}\n      {...props}\n      className={Rac.composeRenderProps(className, (className, renderProps) =>\n        twMerge(\n          \"outline-none\",\n          renderProps.hasChildItems && \"mt-4 first:mt-0\",\n          renderProps.isFocusVisible && \"relative z-10\",\n          className,\n        ),\n      )}\n    >\n      <SidebarExTreeItemContent href={props.href}>\n        {title}\n      </SidebarExTreeItemContent>\n      {children}\n    </Rac.TreeItem>\n  );\n}\n\n/**\n * Derived from SidebarGroup\n */\nexport function SidebarExTree(props: Rac.TreeProps<SidebarExTreeNode>) {\n  return (\n    <Rac.Tree {...props} className=\"relative flex w-full min-w-0 flex-col p-2\">\n      {function renderSidebarTreeNodeEx(item) {\n        return (\n          <SidebarTreeItemEx\n            key={item.id}\n            id={item.id}\n            title={item.title ?? item.id}\n            href={item.href}\n            data-testid={item[\"data-testid\"]}\n          >\n            <Rac.Collection items={item.children}>\n              {renderSidebarTreeNodeEx}\n            </Rac.Collection>\n          </SidebarTreeItemEx>\n        );\n      }}\n    </Rac.Tree>\n  );\n}\n\nexport default function Component() {\n  return (\n    <div className=\"grid gap-2\">\n      <Label>ListBoxExPagination</Label>\n      <Text slot=\"description\">\n        A reusable wrapper that extends{\" \"}\n        <Link\n          href=\"https://react-spectrum.adobe.com/react-aria/ListBox.html\"\n          underline=\"always\"\n        >\n          ListBox\n        </Link>{\" \"}\n        for pagination controls â€” see{\" \"}\n        <Link\n          href=\"https://oui.mw10013.workers.dev/filter?tags=list-box-ex-pagination\"\n          underline=\"always\"\n        >\n          Uses\n        </Link>\n        .\n      </Text>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags-": [
      "sidebar",
      "sidebar-ex"
    ]
  }
}