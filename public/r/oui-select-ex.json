{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-select-ex",
  "type": "registry:component",
  "registryDependencies": [
    "https://oui.mw10013.workers.dev/r/oui-field-error.json",
    "https://oui.mw10013.workers.dev/r/oui-label.json",
    "https://oui.mw10013.workers.dev/r/oui-popover.json",
    "https://oui.mw10013.workers.dev/r/oui-select.json",
    "https://oui.mw10013.workers.dev/r/oui-text.json"
  ],
  "files": [
    {
      "path": "registry/components/oui-select-ex.tsx",
      "content": "import { FieldError } from \"@/registry/components/ui/oui-field-error\";\nimport { Label } from \"@/registry/components/ui/oui-label\";\nimport { Popover } from \"@/registry/components/ui/oui-popover\";\nimport {\n  Select,\n  SelectButton,\n  SelectValue,\n} from \"@/registry/components/ui/oui-select\";\nimport { Text } from \"@/registry/components/ui/oui-text\";\nimport * as Rac from \"react-aria-components\";\n\nexport interface SelectExProps<T extends object>\n  extends Omit<Rac.SelectProps<T>, \"children\"> {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  errorMessage?: string | ((validation: Rac.ValidationResult) => string);\n  items?: Iterable<T>;\n  children: React.ReactNode | ((item: T) => React.ReactNode);\n  buttonClassName?: string;\n  /**\n   * A render function to customize the display of the selected value or placeholder.\n   * Receives `isPlaceholder` and `defaultChildren` (the placeholder string or default rendered item).\n   */\n  renderSelectValue?: (\n    props: Rac.SelectValueRenderProps<T> & {\n      defaultChildren: React.ReactNode | undefined;\n    },\n  ) => React.ReactNode;\n}\n\n/**\n * @example\n *\n * ```tsx\n * <SelectEx\n *   name=\"role\"\n *   label=\"Role\"\n *   defaultSelectedKey={\"member\"}\n *   items={[\n *     { id: \"member\", name: \"Member\" },\n *     { id: \"admin\", name: \"Admin\" },\n *   ]}\n * >\n *   {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n * </SelectEx>\n * ```\n */\nexport function SelectEx<T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  items,\n  buttonClassName,\n  renderSelectValue,\n  ...props\n}: SelectExProps<T>) {\n  return (\n    <Select {...props}>\n      {label && <Label>{label}</Label>}\n      <SelectButton className={buttonClassName}>\n        <SelectValue>{renderSelectValue}</SelectValue>\n      </SelectButton>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <Rac.ListBox items={items}>{children}</Rac.ListBox>\n      </Popover>\n    </Select>\n  );\n}\n\nexport default function Component() {\n  return <div className=\"p-4\">SelectEx</div>;\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "select"
    ]
  }
}