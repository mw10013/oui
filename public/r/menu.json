{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "menu",
  "type": "registry:ui",
  "title": "Menu",
  "description": "React aria components Menu with shadcn characteristics.",
  "dependencies": [
    "react-aria-components",
    "class-variance-authority",
    "lucide-react",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "https://oui.mw10013.workers.dev/r/base.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/oui-menu.tsx",
      "content": "\"use client\";\n\nimport { composeTailwindRenderProps } from \"@/registry/default/ui/oui-base\";\nimport { cva } from \"class-variance-authority\";\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * Derived from shadcn DropdownMenuContent\n */\nexport function Menu<T extends object>({\n  className,\n  ...props\n}: Rac.MenuProps<T>) {\n  return (\n    <Rac.Menu\n      className={composeTailwindRenderProps(\n        className,\n        \"w-full min-w-32 overflow-x-hidden overflow-y-auto p-1\",\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Derived from shadcn DropdownMenuItem\n */\nexport const menuItemVariants = cva(\n  [\n    \"relative flex cursor-default items-center gap-x-2 rounded-sm px-2 py-1.5 text-sm transition-colors outline-none select-none\",\n    '[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*=\"size-\"])]:size-4 [&_svg:not([class*=\"text-\"])]:text-muted-foreground',\n    \"data-focused:bg-accent data-focused:text-accent-foreground\",\n    \"data-disabled:pointer-events-none data-disabled:opacity-50\",\n  ],\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        destructive: [\n          \"text-destructive [&_svg]:text-destructive\",\n          \"data-focused:bg-destructive/10 data-focused:text-destructive dark:data-focused:bg-destructive/20\",\n        ],\n      },\n      selectionMode: {\n        none: \"\",\n        single: \"pl-8\",\n        multiple: \"pl-8\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      selectionMode: \"none\",\n    },\n  },\n);\n\nexport interface MenuItemProps<T extends object> extends Rac.MenuItemProps<T> {\n  variant?: \"default\" | \"destructive\";\n}\n\n/**\n * Derived from shadcn DropdownMenuCheckboxItem and DropdownMenuRadioGroup\n */\nexport function MenuItem<T extends object>({\n  className,\n  variant,\n  children,\n  ...props\n}: MenuItemProps<T>) {\n  return (\n    <Rac.MenuItem\n      {...props}\n      className={Rac.composeRenderProps(className, (className, renderProps) =>\n        twMerge(\n          menuItemVariants({\n            variant,\n            ...renderProps,\n            className,\n          }),\n        ),\n      )}\n    >\n      {({ isSelected, selectionMode, hasSubmenu, ...renderProps }) => {\n        const isCheckboxItem = isSelected && selectionMode === \"multiple\";\n        const isRadioItem = isSelected && selectionMode === \"single\";\n\n        return (\n          <>\n            {isCheckboxItem && (\n              <span className=\"absolute left-2 flex size-3.5 items-center justify-center\">\n                <CheckIcon className=\"size-4\" />\n              </span>\n            )}\n            {isRadioItem && (\n              <span className=\"absolute left-2 flex size-3.5 items-center justify-center\">\n                <CircleIcon className=\"size-2 fill-current\" />\n              </span>\n            )}\n            {typeof children === \"function\"\n              ? children({\n                  isSelected,\n                  selectionMode,\n                  hasSubmenu,\n                  ...renderProps,\n                })\n              : children}\n            {hasSubmenu && <ChevronRightIcon className=\"ml-auto size-4\" />}\n          </>\n        );\n      }}\n    </Rac.MenuItem>\n  );\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "tags": [
      "menu"
    ]
  }
}