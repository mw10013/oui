{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-text",
  "type": "registry:ui",
  "title": "Text",
  "description": "React aria components Text with shadcn characteristics.",
  "dependencies": [
    "react-aria-components",
    "class-variance-authority",
    "tailwind-merge"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/ui/oui-text.tsx",
      "content": "\"use client\";\n\nimport { cva } from \"class-variance-authority\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * Derived from shadcn DropdownMenuItem label and FormDescription.\n */\nconst slot = {\n  label: \"text-sm\",\n  title: \"text-sm\",\n  description: \"text-muted-foreground text-sm\",\n} as const;\n\nexport const textVariants = cva(undefined, {\n  variants: { slot },\n});\n\nfunction isTextVariantsSlotKey(value: unknown): value is keyof typeof slot {\n  return typeof value === \"string\" && Object.keys(slot).includes(value);\n}\n\nexport function Text({\n  elementType: elementTypeProp,\n  slot,\n  className,\n  ...props\n}: Rac.TextProps) {\n  const elementType =\n    !elementTypeProp && slot === \"description\" ? \"p\" : elementTypeProp;\n  return (\n    <Rac.Text\n      data-slot={slot === \"description\" ? \"form-description\" : undefined}\n      elementType={elementType}\n      slot={slot}\n      className={twMerge(\n        textVariants({\n          slot: isTextVariantsSlotKey(slot) ? slot : undefined,\n          className,\n        }),\n      )}\n      {...props}\n    />\n  );\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "tags": [
      "text"
    ]
  }
}